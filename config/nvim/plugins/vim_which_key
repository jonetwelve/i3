Plug 'liuchengxu/vim-which-key'

let g:mapleader = "\<Space>"
let g:maplocalleader = ","
nnoremap <silent> <leader>      :<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :<c-u>WhichKey  ','<CR>
set timeoutlen=10
let g:which_key_map =  {}
" vim-which-key基本配置完毕
autocmd! FileType which_key
autocmd  FileType which_key set laststatus=0 noruler
			\| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

let g:which_key_map.b = {
			\ 'name':"buffer",
			\ "d":"delte 当前buffer",
			\ "o":"关闭other",
			\ "s":"switch buffer"
			\ }
" fzf 搜索buffer
nnoremap <leader>bd :bd!<cr>
nnoremap <leader>bo :.+1,$bw<cr>:1,.-1bw<cr><cr>
nnoremap <leader>bs :Buffers <cr>

let g:which_key_map.c = {"name":"注释"}

let g:which_key_map.d = {
			\ "name":"Denite",
			\ "d":"direcotry",
			\ "m":"map"
			\ }
nmap <leader>dd :Denite directory_rec<cr>
nmap <leader>dm :Denite mapping<cr>

let g:which_key_map.d.f = {
			\ "name":"file",
			\ "l":"list",
			\ "n":"new"
			\ }
nmap <leader>dfl :Denite file buffer<cr>
nmap <leader>dfn :Denite file:new<cr>
let g:Lf_ShortcutF  = '<c-+>'

let g:which_key_map.f = {
			\ "name":"文件",
			\ "l":"list"
			\ }
nnoremap <leader>fl :Denite file buffer<cr>

let g:which_key_map.l = {
    \ "name":"language",
    \ "f":"format",
    \ "g":"goto define",
    \ "r":"rename"
    \ }
nmap <leader>lf <Plug>(coc-forma)<cr>
nmap <leader>lg <Plug>(coc-definition)<cr>
nmap <leader>lr <Plug>(coc-rename)<cr>

let g:which_key_map.m = {
			\ "name":"标签",
			\ "c":"clean标签",
			\ "l":"list标签",
			\ "t":"toggle标签"
			\ }
nmap <leader>mc :call signature#mark#Purge("all")<cr>
nmap <leader>ml :SignatureListBufferMarks<cr>
nmap <leader>mt m

let g:which_key_map.s = {
			\ "name":"搜索",
			\ "f":"搜索files",
			\ "t":"搜索text",
			\ 's':"Ctrlsf搜索",
			\ 'n':"no搜索高亮"
			\ }
nnoremap <Leader>ss :CtrlSF
nnoremap <leader>sn :nohl<cr>
" fzf搜索文件
nnoremap <leader>sf :Files<cr>
" fzf 搜索文字
nnoremap <leader>st :Ag 

let g:which_key_map.t = {
			\ "name":"代码",
			\ "r":"run"
			\ }
map <Leader>tr :QuickRun<CR>

let g:which_key_map.w = {
			\ "name":"windows",
			\ "n":"nerdtree",
			\ "v":"左右分割窗口",
			\ "h":"上下分割窗口"
			\ }
nmap <leader>wn :NERDTreeToggle<CR>
nmap <leader>wv :vs<CR>
nmap <leader>wh :sp<CR>

let g:which_key_map.x = {
			\ "name":"tools",
			\ "a":"auto close toggle",
			\ "c":"clean plugin",
			\ "h":"help",
			\ "i":"install plugin",
			\ "m":"mru",
			\ "s":"source %",
			\ "u":"update plugin"
			\ }
nmap <leader>xa <Plug>ToggleAutoCloseMappings<cr>
nmap <leader>xc :PlugClean<cr>
nmap <leader>xh :help 
nmap <leader>xi :PlugInstall<cr>
nmap <leader>xm :MRU<cr>
nmap <leader>xs :source %<cr>
nmap <leader>xu :PlugUpdate<cr>
